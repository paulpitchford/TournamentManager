// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TournamentManager.DataAccess;

#nullable disable

namespace TournamentManager.DataAccess.Migrations
{
    [DbContext(typeof(PokerDbContext))]
    [Migration("20230212160111_GameTypes")]
    partial class GameTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.GameType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AwardPoints")
                        .HasColumnType("bit");

                    b.Property<string>("GameTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GameTypeName")
                        .IsUnique();

                    b.ToTable("GameTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbb07104-cffa-4539-91ce-1d0e5ecce2e0"),
                            AwardPoints = true,
                            GameTypeName = "League"
                        },
                        new
                        {
                            Id = new Guid("6117db2a-2143-460d-a5cf-7d038caa3c33"),
                            AwardPoints = false,
                            GameTypeName = "Final"
                        },
                        new
                        {
                            Id = new Guid("0bd6aac9-ad90-4fdb-9725-ae363f0d9171"),
                            AwardPoints = false,
                            GameTypeName = "Special"
                        });
                });

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SeasonName")
                        .IsUnique();

                    b.ToTable("Seasons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b0c1ad0-e4f5-4fb6-98a4-e5e2a2d5e24e"),
                            SeasonName = "Season One",
                            StartDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7a0cf45d-7423-4aea-b7a5-aa0c571d5b05"),
                            SeasonName = "Season Two",
                            StartDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e007944b-bda8-42bf-9d1e-1d7894f98ff5"),
                            SeasonName = "Season Three",
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
