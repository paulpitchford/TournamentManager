@using TournamentManager.Infrastructure.Entities
@using TournamentManager.Infrastructure.Interfaces;

@if (Game != null)
{
    <EditForm Model="Game" OnValidSubmit="OnSubmit">
        <FluentValidationValidator />

        <div class="row mb-3">
            <label for="game-title" class="col-sm-2 col-form-label">Game Title</label>
            <div class="col-sm-10">
                <InputText class="form-control" id="game-title" @bind-Value="Game.GameTitle" />
                <ValidationMessage For="() => Game.GameTitle" />
            </div>
        </div>


        <div class="row mb-3">
            <label for="season" class="col-sm-2 col-form-label">Season</label>
            <div class="col-sm-10">
                <InputSelect class="form-control" id="season" @bind-Value="Game.SeasonId">
                    <option value="">Select Season...</option>
                    @if (Seasons != null)
                    {
                        foreach (Season season in Seasons)
                        {
                            <option value="@season.Id">@season.SeasonName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="() => Game.SeasonId" />
            </div>
        </div>

        <div class="row mb-3">
            <label for="gametype" class="col-sm-2 col-form-label">Game Type</label>
            <div class="col-sm-10">
                <InputSelect class="form-control" id="gametype" @bind-Value="Game.GameTypeId">
                    <option value="">Select Game Type...</option>
                    @if (GameTypes != null)
                    {
                        foreach (GameType gameType in GameTypes)
                        {
                            <option value="@gameType.Id">@gameType.GameTypeName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="() => Game.GameTypeId" />
            </div>
        </div>

        <div class="row mb-3">
            <label for="venue" class="col-sm-2 col-form-label">Venue</label>
            <div class="col-sm-10">
                <InputSelect class="form-control" id="venue" @bind-Value="Game.VenueId">
                    <option value="">Select Venue...</option>
                    @if (Venues != null)
                    {
                        foreach (Venue venue in Venues)
                        {
                            <option value="@venue.Id">@venue.VenueName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="() => Game.VenueId" />
            </div>
        </div>

        <div class="row mb-3">
            <label for="game-date" class="col-sm-2 col-form-label">Game Date</label>
            <div class="col-sm-10">
                <DateEdit id="game-date" TValue="DateTime" @bind-Date="Game.GameDateTime" InputMode="DateInputMode.DateTime" />
                <ValidationMessage For="() => Game.GameDateTime" />
            </div>
        </div>

        <div class="row mb-3 d-flex align-items-center">
            <label for="publish-results" class="col-sm-2 col-form-label">Publish Results</label>
            <div class="col-md-4">
                <InputCheckbox id="publish-results" class="form-check-input" @bind-Value="Game.PublishResults" />
            </div>
        </div>

        <div class="row mb-3">
            <label for="details" class="col-sm-2 col-form-label">Game Details</label>
            <div class="col-sm-10">
                <InputTextArea rows="3" class="form-control" id="details" @bind-Value="Game.GameDetails" />
                <ValidationMessage For="() => Game.GameDetails" />
            </div>
        </div>

        <div class="row mb-3">
            <label for="buy-in" class="col-sm-2 col-form-label">Buy-in</label>
            <div class="col-sm-10">
                <div class="input-group">
                    <div class="input-group-text">£</div>
                    <InputNumber class="form-control" id="buy-in" @bind-Value="Game.Buyin" />
                    <ValidationMessage For="() => Game.Buyin" />
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <label for="fee" class="col-sm-2 col-form-label">Fee</label>
            <div class="col-sm-10">
                <div class="input-group">
                    <div class="input-group-text">£</div>
                    <InputNumber class="form-control" id="fee" @bind-Value="Game.Fee" />
                    <ValidationMessage For="() => Game.Fee" />
                </div>
            </div>
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn-secondary" type="button" @onclick="OnCancel">Back</button>
    </EditForm>

    <div class="row">
        <div class=col-12>
            <h3 style="margin-top: 20px;">Results</h3>
        </div>
    </div>

    <EditForm Model="result" OnValidSubmit="AddResult">
        <FluentValidationValidator />

        <div class="row" style="margin-bottom:10px;">
            <div class="col-2">
                <label for="position" class="form-label">Position</label>
                <InputNumber class="form-control" id="position" @bind-Value="result.Position" disabled />
            </div>

            <div class="col-4">
                <label for="player" class="form-label">Player</label>
                <InputSelect class="form-control" id="player" @bind-Value="result.PlayerId" @bind-Value:after="OnPlayerChanged">
                    <option value="">Select Player...</option>
                    @if (Players != null)
                    {
                        foreach (Player player in Players)
                        {
                            <option value="@player.Id">@player.FirstName @player.LastName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="() => result.PlayerId" />
            </div>

            <div class="col-2">
                <label for="cash" class="form-label">Cash</label>
                <InputNumber class="form-control" id="cash" @bind-Value="result.Cash" />
                <ValidationMessage For="() => result.Cash" />
            </div>

            <div class="col-1">
                <label for="add-button" class="form-label">&nbsp;</label>
                <button id="add-button" class="btn btn-primary form-control" type="submit">Add</button>
            </div>
        </div>
    </EditForm>

    <div class="row">
        <div class="col-12">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Position</th>
                        <th>Player</th>
                        <th>Points</th>
                        <th>Cash</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Result result in Game.Results.OrderBy(p => p.Position))
                    {
                        <tr>
                            <td>@result.Position</td>
                            <td>@result.Player!.FirstName @result.Player!.LastName</td>
                            <td>@result.Points</td>
                            <td>@result.Cash</td>
                            <td><button class="btn btn-sm btn-danger" @onclick="() => RemoveResult(result)" type="button">Remove</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    [Inject]
    IPositionFactory _positionFactory { get; set; } = default!;

    [CascadingParameter]
    Game? Game { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public IEnumerable<Season>? Seasons { get; set; }

    [Parameter]
    public IEnumerable<GameType>? GameTypes { get; set; }

    [Parameter]
    public IEnumerable<Venue>? Venues { get; set; }

    [Parameter]
    public IEnumerable<Player>? Players { get; set; }

    Result result = new Result();
    int currentPosition;

    protected override void OnParametersSet()
    {
        if (Game != null)
        {
            // Here we check if we're loading some positions already from an existing game
            // or whether we're creating a new game with no positions added
            if (Game.Results.Count > 0)
            {
                currentPosition = _positionFactory.NextPosition(Game.Results.Select(p => p.Position).ToList());
            }
            else
            {
                currentPosition = 1;
            }
            result = new Result { Position = currentPosition };
        }
    }

    private void AddResult()
    {
        if (Game != null && Game.Season != null)
        {
            Game.Results.Add(result);
            currentPosition = _positionFactory.NextPosition(Game.Results.Select(p => p.Position).ToList());
            result = new Result { Position = currentPosition };

            // Loop over all results in the Game collection and update the points for each place now we've added a new item:
            foreach (Result gameResult in Game.Results)
            {
                gameResult.Points = _positionFactory.CalculatePoints(gameResult.Position, Game.Results.Count, Game.Season.PointStructure);
            }

        }
    }

    private void RemoveResult(Result selectedResult)
    {
        if (Game != null && Game.Season != null)
        {
            Game.Results.Remove(selectedResult);
            currentPosition = _positionFactory.NextPosition(Game.Results.Select(p => p.Position).ToList());
            result.Position = currentPosition;

            // Loop over all results in the Game collection and update the points for each place now we've removed an item:
            foreach (Result gameResult in Game.Results)
            {
                gameResult.Points = _positionFactory.CalculatePoints(gameResult.Position, Game.Results.Count, Game.Season.PointStructure);
            }
        }
    }

    private void OnPlayerChanged()
    {
        if (Players != null)
        {
            // Pass the player entity onto the result as we need to bind to the first name and last name once the result item is added to the collection.
            result.Player = Players.Where(p => p.Id == result.PlayerId).First();
        }
    }
}
